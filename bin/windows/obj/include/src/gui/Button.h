// Generated by Haxe 4.0.5
#ifndef INCLUDED_src_gui_Button
#define INCLUDED_src_gui_Button

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(src,gui,Button)
HX_DECLARE_CLASS2(src,shape,Rectangle)

namespace src{
namespace gui{


class HXCPP_CLASS_ATTRIBUTES Button_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Button_obj OBJ_;
		Button_obj();

	public:
		enum { _hx_ClassId = 0x7efbba29 };

		void __construct(::String text,Float width,Float height,int color, ::Dynamic __o_x, ::Dynamic __o_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.gui.Button")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"src.gui.Button"); }
		static hx::ObjectPtr< Button_obj > __new(::String text,Float width,Float height,int color, ::Dynamic __o_x, ::Dynamic __o_y);
		static hx::ObjectPtr< Button_obj > __alloc(hx::Ctx *_hx_ctx,::String text,Float width,Float height,int color, ::Dynamic __o_x, ::Dynamic __o_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Button_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Button",12,d6,74,0e); }

		::String text;
		Float rectWidth;
		Float rectHeight;
		int rectColor;
		bool selected;
		int selectedColor;
		 ::src::shape::Rectangle rect;
		 ::openfl::text::TextField textField;
		virtual void build();
		::Dynamic build_dyn();

		virtual void repaint();
		::Dynamic repaint_dyn();

		void click( ::Dynamic e);
		::Dynamic click_dyn();

		void setClickFunc( ::Dynamic listener);
		::Dynamic setClickFunc_dyn();

		void setText(::String text);
		::Dynamic setText_dyn();

		::String getText();
		::Dynamic getText_dyn();

		void setColor(int color);
		::Dynamic setColor_dyn();

		void setSelectedColor(int color);
		::Dynamic setSelectedColor_dyn();

		void setSelected(bool isSelected);
		::Dynamic setSelected_dyn();

};

} // end namespace src
} // end namespace gui

#endif /* INCLUDED_src_gui_Button */ 
