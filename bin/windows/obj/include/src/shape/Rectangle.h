// Generated by Haxe 4.0.5
#ifndef INCLUDED_src_shape_Rectangle
#define INCLUDED_src_shape_Rectangle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(src,shape,Rectangle)

namespace src{
namespace shape{


class HXCPP_CLASS_ATTRIBUTES Rectangle_obj : public  ::openfl::display::Shape_obj
{
	public:
		typedef  ::openfl::display::Shape_obj super;
		typedef Rectangle_obj OBJ_;
		Rectangle_obj();

	public:
		enum { _hx_ClassId = 0x6a992a72 };

		void __construct(Float x,Float y,Float width,Float height, ::Dynamic color);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.shape.Rectangle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"src.shape.Rectangle"); }
		static hx::ObjectPtr< Rectangle_obj > __new(Float x,Float y,Float width,Float height, ::Dynamic color);
		static hx::ObjectPtr< Rectangle_obj > __alloc(hx::Ctx *_hx_ctx,Float x,Float y,Float width,Float height, ::Dynamic color);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Rectangle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Rectangle",0f,b4,4f,bb); }

		int color;
		Float lastX;
		Float lastY;
		Float lastWidth;
		Float lastHeight;
		void setColor(int color);
		::Dynamic setColor_dyn();

};

} // end namespace src
} // end namespace shape

#endif /* INCLUDED_src_shape_Rectangle */ 
