// Generated by Haxe 4.0.5
#ifndef INCLUDED_mvc_view_MessageBox
#define INCLUDED_mvc_view_MessageBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(mvc,view,MessageBox)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(src,gui,Button)
HX_DECLARE_CLASS2(src,shape,Rectangle)

namespace mvc{
namespace view{


class HXCPP_CLASS_ATTRIBUTES MessageBox_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef MessageBox_obj OBJ_;
		MessageBox_obj();

	public:
		enum { _hx_ClassId = 0x29a0c163 };

		void __construct(::String text, ::Dynamic __o_parentWidth, ::Dynamic __o_parentHeight);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mvc.view.MessageBox")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mvc.view.MessageBox"); }
		static hx::ObjectPtr< MessageBox_obj > __new(::String text, ::Dynamic __o_parentWidth, ::Dynamic __o_parentHeight);
		static hx::ObjectPtr< MessageBox_obj > __alloc(hx::Ctx *_hx_ctx,::String text, ::Dynamic __o_parentWidth, ::Dynamic __o_parentHeight);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MessageBox_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MessageBox",a4,da,4a,c9); }

		 ::src::shape::Rectangle rect;
		 ::src::gui::Button closeButton;
		 ::openfl::text::TextField textField;
		int boxWidth;
		int boxHeight;
		 ::src::gui::Button getCloseButton();
		::Dynamic getCloseButton_dyn();

};

} // end namespace mvc
} // end namespace view

#endif /* INCLUDED_mvc_view_MessageBox */ 
