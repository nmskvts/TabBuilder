// Generated by Haxe 4.0.5
#ifndef INCLUDED_mvc_view_Grid
#define INCLUDED_mvc_view_Grid

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(mvc,view,Grid)
HX_DECLARE_CLASS2(mvc,view,GridButton)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(src,gui,Button)
HX_DECLARE_CLASS2(src,shape,Rectangle)

namespace mvc{
namespace view{


class HXCPP_CLASS_ATTRIBUTES Grid_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Grid_obj OBJ_;
		Grid_obj();

	public:
		enum { _hx_ClassId = 0x0e294065 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mvc.view.Grid")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mvc.view.Grid"); }
		static hx::ObjectPtr< Grid_obj > __new();
		static hx::ObjectPtr< Grid_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Grid_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Grid",e6,02,45,2f); }

		 ::src::shape::Rectangle rect;
		int rows;
		int columns;
		int rowsLeft;
		int columnsLeft;
		Float xStep;
		Float yStep;
		Float gridWidth;
		Float gridHeight;
		 ::openfl::display::Bitmap bitMap;
		 ::openfl::display::BitmapData bitMapData;
		void addNewGridButton( ::mvc::view::GridButton button);
		::Dynamic addNewGridButton_dyn();

		void addGridButton(Float xStep,Float yStep, ::mvc::view::GridButton button);
		::Dynamic addGridButton_dyn();

		void clean();
		::Dynamic clean_dyn();

		void addBackGroundImage(::String path);
		::Dynamic addBackGroundImage_dyn();

};

} // end namespace mvc
} // end namespace view

#endif /* INCLUDED_mvc_view_Grid */ 
