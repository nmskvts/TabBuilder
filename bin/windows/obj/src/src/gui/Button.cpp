// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_src_factory_TextFactory
#include <src/factory/TextFactory.h>
#endif
#ifndef INCLUDED_src_gui_Button
#include <src/gui/Button.h>
#endif
#ifndef INCLUDED_src_shape_Rectangle
#include <src/shape/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9577105748b6ea2e_15_new,"src.gui.Button","new",0x49097961,"src.gui.Button.new","gui/Button.hx",15,0x37939c18)
HX_LOCAL_STACK_FRAME(_hx_pos_9577105748b6ea2e_38_build,"src.gui.Button","build",0xdb1d866f,"src.gui.Button.build","gui/Button.hx",38,0x37939c18)
HX_LOCAL_STACK_FRAME(_hx_pos_9577105748b6ea2e_48_repaint,"src.gui.Button","repaint",0x368dc88c,"src.gui.Button.repaint","gui/Button.hx",48,0x37939c18)
HX_LOCAL_STACK_FRAME(_hx_pos_9577105748b6ea2e_52_click,"src.gui.Button","click",0x68912789,"src.gui.Button.click","gui/Button.hx",52,0x37939c18)
HX_LOCAL_STACK_FRAME(_hx_pos_9577105748b6ea2e_64_setClickFunc,"src.gui.Button","setClickFunc",0xa92bc689,"src.gui.Button.setClickFunc","gui/Button.hx",64,0x37939c18)
HX_LOCAL_STACK_FRAME(_hx_pos_9577105748b6ea2e_69_setText,"src.gui.Button","setText",0xa522caf0,"src.gui.Button.setText","gui/Button.hx",69,0x37939c18)
HX_LOCAL_STACK_FRAME(_hx_pos_9577105748b6ea2e_73_getText,"src.gui.Button","getText",0xb22139e4,"src.gui.Button.getText","gui/Button.hx",73,0x37939c18)
HX_LOCAL_STACK_FRAME(_hx_pos_9577105748b6ea2e_76_setColor,"src.gui.Button","setColor",0x1611edc0,"src.gui.Button.setColor","gui/Button.hx",76,0x37939c18)
HX_LOCAL_STACK_FRAME(_hx_pos_9577105748b6ea2e_81_setSelectedColor,"src.gui.Button","setSelectedColor",0xd9e2ee65,"src.gui.Button.setSelectedColor","gui/Button.hx",81,0x37939c18)
HX_LOCAL_STACK_FRAME(_hx_pos_9577105748b6ea2e_86_setSelected,"src.gui.Button","setSelected",0x98c6061e,"src.gui.Button.setSelected","gui/Button.hx",86,0x37939c18)
namespace src{
namespace gui{

void Button_obj::__construct(::String text,Float width,Float height,int color, ::Dynamic __o_x, ::Dynamic __o_y){
            		 ::Dynamic x = __o_x;
            		if (hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (hx::IsNull(__o_y)) y = 0;
            	HX_STACKFRAME(&_hx_pos_9577105748b6ea2e_15_new)
HXLINE(  22)		this->selected = false;
HXLINE(  28)		super::__construct();
HXLINE(  29)		this->text = text;
HXLINE(  30)		this->rectColor = color;
HXLINE(  31)		this->rectWidth = width;
HXLINE(  32)		this->rectHeight = height;
HXLINE(  33)		this->set_x(( (Float)(x) ));
HXLINE(  34)		this->set_y(( (Float)(y) ));
HXLINE(  35)		this->build();
            	}

Dynamic Button_obj::__CreateEmpty() { return new Button_obj; }

void *Button_obj::_hx_vtable = 0;

Dynamic Button_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Button_obj > _hx_result = new Button_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Button_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x7efbba29;
		}
	}
}

void Button_obj::build(){
            	HX_GC_STACKFRAME(&_hx_pos_9577105748b6ea2e_38_build)
HXLINE(  39)		this->rect =  ::src::shape::Rectangle_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->rectWidth,this->rectHeight,this->rectColor);
HXLINE(  40)		this->addChild(this->rect);
HXLINE(  41)		this->textField = ::src::factory::TextFactory_obj::createTextField(this->text,this->rectWidth,null());
HXLINE(  42)		 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN(  42)		Float _hx_tmp1 = (this->rectHeight / ( (Float)(2) ));
HXDLIN(  42)		_hx_tmp->set_y((_hx_tmp1 - ( (Float)(this->textField->getTextFormat(null(),null())->size) )));
HXLINE(  43)		this->addChild(this->textField);
HXLINE(  44)		this->addEventListener(HX_("click",48,7c,5e,48),this->click_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,build,(void))

void Button_obj::repaint(){
            	HX_STACKFRAME(&_hx_pos_9577105748b6ea2e_48_repaint)
HXDLIN(  48)		this->rect->setColor(this->rectColor);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,repaint,(void))

void Button_obj::click( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_9577105748b6ea2e_52_click)
HXDLIN(  52)		if (!(this->selected)) {
HXLINE(  53)			this->selected = true;
HXLINE(  54)			this->rect->setColor(this->selectedColor);
            		}
            		else {
HXLINE(  57)			this->selected = false;
HXLINE(  58)			this->rect->setColor(this->rectColor);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,click,(void))

void Button_obj::setClickFunc( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_9577105748b6ea2e_64_setClickFunc)
HXDLIN(  64)		this->addEventListener(HX_("click",48,7c,5e,48),listener,null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,setClickFunc,(void))

void Button_obj::setText(::String text){
            	HX_STACKFRAME(&_hx_pos_9577105748b6ea2e_69_setText)
HXDLIN(  69)		this->textField->set_text(text);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,setText,(void))

::String Button_obj::getText(){
            	HX_STACKFRAME(&_hx_pos_9577105748b6ea2e_73_getText)
HXDLIN(  73)		return this->text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,getText,return )

void Button_obj::setColor(int color){
            	HX_STACKFRAME(&_hx_pos_9577105748b6ea2e_76_setColor)
HXLINE(  77)		this->rectColor = color;
HXLINE(  78)		this->repaint();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,setColor,(void))

void Button_obj::setSelectedColor(int color){
            	HX_STACKFRAME(&_hx_pos_9577105748b6ea2e_81_setSelectedColor)
HXLINE(  82)		this->selectedColor = color;
HXLINE(  83)		this->repaint();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,setSelectedColor,(void))

void Button_obj::setSelected(bool isSelected){
            	HX_STACKFRAME(&_hx_pos_9577105748b6ea2e_86_setSelected)
HXLINE(  87)		this->selected = isSelected;
HXLINE(  88)		if (!(isSelected)) {
HXLINE(  89)			this->setColor(this->rectColor);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,setSelected,(void))


hx::ObjectPtr< Button_obj > Button_obj::__new(::String text,Float width,Float height,int color, ::Dynamic __o_x, ::Dynamic __o_y) {
	hx::ObjectPtr< Button_obj > __this = new Button_obj();
	__this->__construct(text,width,height,color,__o_x,__o_y);
	return __this;
}

hx::ObjectPtr< Button_obj > Button_obj::__alloc(hx::Ctx *_hx_ctx,::String text,Float width,Float height,int color, ::Dynamic __o_x, ::Dynamic __o_y) {
	Button_obj *__this = (Button_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Button_obj), true, "src.gui.Button"));
	*(void **)__this = Button_obj::_hx_vtable;
	__this->__construct(text,width,height,color,__o_x,__o_y);
	return __this;
}

Button_obj::Button_obj()
{
}

void Button_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Button);
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(rectWidth,"rectWidth");
	HX_MARK_MEMBER_NAME(rectHeight,"rectHeight");
	HX_MARK_MEMBER_NAME(rectColor,"rectColor");
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(selectedColor,"selectedColor");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(textField,"textField");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Button_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(rectWidth,"rectWidth");
	HX_VISIT_MEMBER_NAME(rectHeight,"rectHeight");
	HX_VISIT_MEMBER_NAME(rectColor,"rectColor");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(selectedColor,"selectedColor");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Button_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"build") ) { return hx::Val( build_dyn() ); }
		if (HX_FIELD_EQ(inName,"click") ) { return hx::Val( click_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"repaint") ) { return hx::Val( repaint_dyn() ); }
		if (HX_FIELD_EQ(inName,"setText") ) { return hx::Val( setText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"setColor") ) { return hx::Val( setColor_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rectWidth") ) { return hx::Val( rectWidth ); }
		if (HX_FIELD_EQ(inName,"rectColor") ) { return hx::Val( rectColor ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rectHeight") ) { return hx::Val( rectHeight ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setSelected") ) { return hx::Val( setSelected_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setClickFunc") ) { return hx::Val( setClickFunc_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedColor") ) { return hx::Val( selectedColor ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setSelectedColor") ) { return hx::Val( setSelectedColor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Button_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::src::shape::Rectangle >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rectWidth") ) { rectWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rectColor") ) { rectColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rectHeight") ) { rectHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedColor") ) { selectedColor=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Button_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("rectWidth",42,b6,2a,54));
	outFields->push(HX_("rectHeight",2b,3c,84,07));
	outFields->push(HX_("rectColor",9f,71,24,d4));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	outFields->push(HX_("selectedColor",08,4d,9e,40));
	outFields->push(HX_("rect",24,4d,a7,4b));
	outFields->push(HX_("textField",cd,24,81,99));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Button_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Button_obj,text),HX_("text",ad,cc,f9,4c)},
	{hx::fsFloat,(int)offsetof(Button_obj,rectWidth),HX_("rectWidth",42,b6,2a,54)},
	{hx::fsFloat,(int)offsetof(Button_obj,rectHeight),HX_("rectHeight",2b,3c,84,07)},
	{hx::fsInt,(int)offsetof(Button_obj,rectColor),HX_("rectColor",9f,71,24,d4)},
	{hx::fsBool,(int)offsetof(Button_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{hx::fsInt,(int)offsetof(Button_obj,selectedColor),HX_("selectedColor",08,4d,9e,40)},
	{hx::fsObject /*  ::src::shape::Rectangle */ ,(int)offsetof(Button_obj,rect),HX_("rect",24,4d,a7,4b)},
	{hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(Button_obj,textField),HX_("textField",cd,24,81,99)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Button_obj_sStaticStorageInfo = 0;
#endif

static ::String Button_obj_sMemberFields[] = {
	HX_("text",ad,cc,f9,4c),
	HX_("rectWidth",42,b6,2a,54),
	HX_("rectHeight",2b,3c,84,07),
	HX_("rectColor",9f,71,24,d4),
	HX_("selected",5b,2a,6d,b1),
	HX_("selectedColor",08,4d,9e,40),
	HX_("rect",24,4d,a7,4b),
	HX_("textField",cd,24,81,99),
	HX_("build",2e,db,ea,ba),
	HX_("repaint",0b,0b,e9,a3),
	HX_("click",48,7c,5e,48),
	HX_("setClickFunc",aa,17,14,47),
	HX_("setText",6f,0d,7e,12),
	HX_("getText",63,7c,7c,1f),
	HX_("setColor",61,da,90,58),
	HX_("setSelectedColor",06,e4,00,01),
	HX_("setSelected",1d,f4,cd,e1),
	::String(null()) };

hx::Class Button_obj::__mClass;

void Button_obj::__register()
{
	Button_obj _hx_dummy;
	Button_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("src.gui.Button",ef,34,df,db);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Button_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Button_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Button_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Button_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace gui
