// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_src_factory_TextFactory
#include <src/factory/TextFactory.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_257d09f6fab1fbcd_13_createTextField,"src.factory.TextFactory","createTextField",0x92d21b12,"src.factory.TextFactory.createTextField","factory/TextFactory.hx",13,0x1fa9ca46)
HX_LOCAL_STACK_FRAME(_hx_pos_257d09f6fab1fbcd_23_getTextFormat,"src.factory.TextFactory","getTextFormat",0xd1cafe9b,"src.factory.TextFactory.getTextFormat","factory/TextFactory.hx",23,0x1fa9ca46)
namespace src{
namespace factory{

void TextFactory_obj::__construct() { }

Dynamic TextFactory_obj::__CreateEmpty() { return new TextFactory_obj; }

void *TextFactory_obj::_hx_vtable = 0;

Dynamic TextFactory_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextFactory_obj > _hx_result = new TextFactory_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextFactory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d212657;
}

 ::openfl::text::TextField TextFactory_obj::createTextField(::String text,Float width, ::Dynamic __o_textColor){
            		 ::Dynamic textColor = __o_textColor;
            		if (hx::IsNull(__o_textColor)) textColor = -16777216;
            	HX_GC_STACKFRAME(&_hx_pos_257d09f6fab1fbcd_13_createTextField)
HXLINE(  14)		 ::openfl::text::TextField textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  15)		textField->set_width(width);
HXLINE(  16)		textField->set_selectable(false);
HXLINE(  17)		textField->set_text(text);
HXLINE(  18)		textField->setTextFormat(::src::factory::TextFactory_obj::getTextFormat(( (int)(textColor) )),null(),null());
HXLINE(  19)		return textField;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(TextFactory_obj,createTextField,return )

 ::openfl::text::TextFormat TextFactory_obj::getTextFormat(int textColor){
            	HX_GC_STACKFRAME(&_hx_pos_257d09f6fab1fbcd_23_getTextFormat)
HXLINE(  24)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  25)		format->color = textColor;
HXLINE(  26)		format->font = null();
HXLINE(  27)		format->bold = true;
HXLINE(  28)		format->align = 0;
HXLINE(  29)		format->size = 20;
HXLINE(  30)		return format;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextFactory_obj,getTextFormat,return )


TextFactory_obj::TextFactory_obj()
{
}

bool TextFactory_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { outValue = getTextFormat_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createTextField") ) { outValue = createTextField_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *TextFactory_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TextFactory_obj_sStaticStorageInfo = 0;
#endif

hx::Class TextFactory_obj::__mClass;

static ::String TextFactory_obj_sStaticFields[] = {
	HX_("createTextField",31,de,75,3a),
	HX_("getTextFormat",fa,6b,f1,90),
	::String(null())
};

void TextFactory_obj::__register()
{
	TextFactory_obj _hx_dummy;
	TextFactory_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("src.factory.TextFactory",4f,0b,71,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextFactory_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextFactory_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TextFactory_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextFactory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextFactory_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace factory
