// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_src_shape_Rectangle
#include <src/shape/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c8548f3a75c2770a_17_new,"src.shape.Rectangle","new",0xd15c43ea,"src.shape.Rectangle.new","shape/Rectangle.hx",17,0xbe8648fd)
HX_LOCAL_STACK_FRAME(_hx_pos_c8548f3a75c2770a_27_setColor,"src.shape.Rectangle","setColor",0x02475297,"src.shape.Rectangle.setColor","shape/Rectangle.hx",27,0xbe8648fd)
namespace src{
namespace shape{

void Rectangle_obj::__construct(Float x,Float y,Float width,Float height, ::Dynamic color){
            	HX_STACKFRAME(&_hx_pos_c8548f3a75c2770a_17_new)
HXLINE(  18)		super::__construct();
HXLINE(  19)		this->lastX = x;
HXLINE(  20)		this->lastY = y;
HXLINE(  21)		this->lastWidth = width;
HXLINE(  22)		this->lastHeight = height;
HXLINE(  23)		this->setColor(( (int)(color) ));
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

void *Rectangle_obj::_hx_vtable = 0;

Dynamic Rectangle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Rectangle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x01c05e1f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x01c05e1f;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8 || inClassId==(int)0x6a992a72;
	}
}

void Rectangle_obj::setColor(int color){
            	HX_STACKFRAME(&_hx_pos_c8548f3a75c2770a_27_setColor)
HXLINE(  28)		this->color = color;
HXLINE(  29)		this->get_graphics()->clear();
HXLINE(  30)		this->get_graphics()->beginFill(color,null());
HXLINE(  31)		this->get_graphics()->drawRect(this->lastX,this->lastY,this->lastWidth,this->lastHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,setColor,(void))


hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new(Float x,Float y,Float width,Float height, ::Dynamic color) {
	hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
	__this->__construct(x,y,width,height,color);
	return __this;
}

hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__alloc(hx::Ctx *_hx_ctx,Float x,Float y,Float width,Float height, ::Dynamic color) {
	Rectangle_obj *__this = (Rectangle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), true, "src.shape.Rectangle"));
	*(void **)__this = Rectangle_obj::_hx_vtable;
	__this->__construct(x,y,width,height,color);
	return __this;
}

Rectangle_obj::Rectangle_obj()
{
}

hx::Val Rectangle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"lastX") ) { return hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return hx::Val( lastY ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setColor") ) { return hx::Val( setColor_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastWidth") ) { return hx::Val( lastWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastHeight") ) { return hx::Val( lastHeight ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Rectangle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastWidth") ) { lastWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastHeight") ) { lastHeight=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("lastX",42,01,bc,6f));
	outFields->push(HX_("lastY",43,01,bc,6f));
	outFields->push(HX_("lastWidth",d0,e3,0f,17));
	outFields->push(HX_("lastHeight",dd,ea,26,cd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Rectangle_obj,color),HX_("color",63,71,5c,4a)},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,lastX),HX_("lastX",42,01,bc,6f)},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,lastY),HX_("lastY",43,01,bc,6f)},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,lastWidth),HX_("lastWidth",d0,e3,0f,17)},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,lastHeight),HX_("lastHeight",dd,ea,26,cd)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Rectangle_obj_sStaticStorageInfo = 0;
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_("color",63,71,5c,4a),
	HX_("lastX",42,01,bc,6f),
	HX_("lastY",43,01,bc,6f),
	HX_("lastWidth",d0,e3,0f,17),
	HX_("lastHeight",dd,ea,26,cd),
	HX_("setColor",61,da,90,58),
	::String(null()) };

hx::Class Rectangle_obj::__mClass;

void Rectangle_obj::__register()
{
	Rectangle_obj _hx_dummy;
	Rectangle_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("src.shape.Rectangle",f8,c6,e5,39);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace shape
