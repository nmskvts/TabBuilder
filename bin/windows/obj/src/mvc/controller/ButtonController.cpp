// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_Access_Impl_
#include <haxe/xml/_Access/Access_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeListAccess_Impl_
#include <haxe/xml/_Access/NodeListAccess_Impl_.h>
#endif
#ifndef INCLUDED_mvc_controller_ButtonController
#include <mvc/controller/ButtonController.h>
#endif
#ifndef INCLUDED_mvc_view_Grid
#include <mvc/view/Grid.h>
#endif
#ifndef INCLUDED_mvc_view_GridButton
#include <mvc/view/GridButton.h>
#endif
#ifndef INCLUDED_mvc_view_MessageBox
#include <mvc/view/MessageBox.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_src_factory_ButtonFactory
#include <src/factory/ButtonFactory.h>
#endif
#ifndef INCLUDED_src_gui_Button
#include <src/gui/Button.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5716cf9b62915a0b_16_new,"mvc.controller.ButtonController","new",0x1eb2eebe,"mvc.controller.ButtonController.new","mvc/controller/ButtonController.hx",16,0x8fed48d2)
HX_LOCAL_STACK_FRAME(_hx_pos_5716cf9b62915a0b_31_loadImages,"mvc.controller.ButtonController","loadImages",0x992408e0,"mvc.controller.ButtonController.loadImages","mvc/controller/ButtonController.hx",31,0x8fed48d2)
HX_LOCAL_STACK_FRAME(_hx_pos_5716cf9b62915a0b_37_loadImages,"mvc.controller.ButtonController","loadImages",0x992408e0,"mvc.controller.ButtonController.loadImages","mvc/controller/ButtonController.hx",37,0x8fed48d2)
HX_LOCAL_STACK_FRAME(_hx_pos_5716cf9b62915a0b_51_createMessageBox,"mvc.controller.ButtonController","createMessageBox",0xe5721382,"mvc.controller.ButtonController.createMessageBox","mvc/controller/ButtonController.hx",51,0x8fed48d2)
HX_LOCAL_STACK_FRAME(_hx_pos_5716cf9b62915a0b_47_createMessageBox,"mvc.controller.ButtonController","createMessageBox",0xe5721382,"mvc.controller.ButtonController.createMessageBox","mvc/controller/ButtonController.hx",47,0x8fed48d2)
HX_LOCAL_STACK_FRAME(_hx_pos_5716cf9b62915a0b_54_tabClick,"mvc.controller.ButtonController","tabClick",0x6aa30a95,"mvc.controller.ButtonController.tabClick","mvc/controller/ButtonController.hx",54,0x8fed48d2)
namespace mvc{
namespace controller{

void ButtonController_obj::__construct( ::mvc::view::Grid grid, ::openfl::display::Sprite mainSprite){
            	HX_STACKFRAME(&_hx_pos_5716cf9b62915a0b_16_new)
HXLINE(  21)		this->gridButtons = ::Array_obj< ::Dynamic>::__new();
HXLINE(  25)		this->grid = grid;
HXLINE(  26)		this->mainSprite = mainSprite;
HXLINE(  27)		this->elementIterator = ::Xml_obj::parse(::openfl::utils::Assets_obj::getText(HX_("xml/info.xml",4f,2c,ba,ae)))->elements();
HXLINE(  28)		this->loadImages();
            	}

Dynamic ButtonController_obj::__CreateEmpty() { return new ButtonController_obj; }

void *ButtonController_obj::_hx_vtable = 0;

Dynamic ButtonController_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ButtonController_obj > _hx_result = new ButtonController_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ButtonController_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5386ecc4;
}

void ButtonController_obj::loadImages(){
            	HX_STACKFRAME(&_hx_pos_5716cf9b62915a0b_31_loadImages)
HXDLIN(  31)		 ::mvc::controller::ButtonController _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  32)		while(( (bool)(this->elementIterator->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  33)			int number = 1;
HXLINE(  34)			 ::Xml x = ( ( ::Xml)(this->elementIterator->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  34)			bool paths;
HXDLIN(  34)			if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE(  34)				paths = (x->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  34)				paths = false;
            			}
HXDLIN(  34)			if (paths) {
HXLINE(  34)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            			}
HXDLIN(  34)			 ::Xml this1 = x;
HXDLIN(  34)			::Array< ::Dynamic> paths1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(this1,HX_("path",a5,e5,51,4a));
HXLINE(  35)			{
HXLINE(  35)				int _g = 0;
HXDLIN(  35)				while((_g < paths1->length)){
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::mvc::controller::ButtonController,_gthis, ::mvc::view::GridButton,newGridButton) HXARGC(1)
            					void _hx_run( ::Dynamic e){
            						HX_STACKFRAME(&_hx_pos_5716cf9b62915a0b_37_loadImages)
HXLINE(  38)						 ::mvc::view::Grid _gthis1 = _gthis->grid;
HXDLIN(  38)						_gthis1->addBackGroundImage(newGridButton->getImagePath());
HXLINE(  39)						::String _hx_tmp = newGridButton->getText();
HXDLIN(  39)						_gthis->createMessageBox(_hx_tmp);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(  35)					 ::Xml path = paths1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(  35)					_g = (_g + 1);
HXLINE(  36)					 ::mvc::view::GridButton newGridButton = ::src::factory::ButtonFactory_obj::createGrid((HX_("Kitty #",be,a4,c6,41) + number),::haxe::xml::_Access::Access_Impl__obj::get_innerData(path),( (Float)(0) ),( (Float)(0) ),null(),null());
HXLINE(  37)					newGridButton->addEventListener(HX_("click",48,7c,5e,48), ::Dynamic(new _hx_Closure_0(_gthis,newGridButton)),null(),null(),null());
HXLINE(  41)					this->gridButtons->push(newGridButton);
HXLINE(  42)					number = (number + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ButtonController_obj,loadImages,(void))

void ButtonController_obj::createMessageBox(::String text){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::mvc::controller::ButtonController,_gthis, ::mvc::view::MessageBox,messageBox1) HXARGC(1)
            		void _hx_run( ::Dynamic e){
            			HX_GC_STACKFRAME(&_hx_pos_5716cf9b62915a0b_51_createMessageBox)
HXLINE(  51)			_gthis->mainSprite->removeChild(messageBox1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_5716cf9b62915a0b_47_createMessageBox)
HXDLIN(  47)		 ::mvc::controller::ButtonController _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  48)		Float messageBox = this->mainSprite->get_width();
HXDLIN(  48)		 ::mvc::view::MessageBox messageBox1 =  ::mvc::view::MessageBox_obj::__alloc( HX_CTX ,text,messageBox,this->mainSprite->get_height());
HXLINE(  49)		this->mainSprite->addChild(messageBox1);
HXLINE(  50)		messageBox1->getCloseButton()->addEventListener(HX_("click",48,7c,5e,48), ::Dynamic(new _hx_Closure_0(_gthis,messageBox1)),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ButtonController_obj,createMessageBox,(void))

void ButtonController_obj::tabClick(){
            	HX_STACKFRAME(&_hx_pos_5716cf9b62915a0b_54_tabClick)
HXLINE(  55)		this->grid->clean();
HXLINE(  56)		{
HXLINE(  56)			int _g = 0;
HXDLIN(  56)			::Array< ::Dynamic> _g1 = this->gridButtons;
HXDLIN(  56)			while((_g < _g1->length)){
HXLINE(  56)				 ::mvc::view::GridButton button = _g1->__get(_g).StaticCast<  ::mvc::view::GridButton >();
HXDLIN(  56)				_g = (_g + 1);
HXLINE(  57)				this->grid->addNewGridButton(button);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ButtonController_obj,tabClick,(void))


hx::ObjectPtr< ButtonController_obj > ButtonController_obj::__new( ::mvc::view::Grid grid, ::openfl::display::Sprite mainSprite) {
	hx::ObjectPtr< ButtonController_obj > __this = new ButtonController_obj();
	__this->__construct(grid,mainSprite);
	return __this;
}

hx::ObjectPtr< ButtonController_obj > ButtonController_obj::__alloc(hx::Ctx *_hx_ctx, ::mvc::view::Grid grid, ::openfl::display::Sprite mainSprite) {
	ButtonController_obj *__this = (ButtonController_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ButtonController_obj), true, "mvc.controller.ButtonController"));
	*(void **)__this = ButtonController_obj::_hx_vtable;
	__this->__construct(grid,mainSprite);
	return __this;
}

ButtonController_obj::ButtonController_obj()
{
}

void ButtonController_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ButtonController);
	HX_MARK_MEMBER_NAME(grid,"grid");
	HX_MARK_MEMBER_NAME(elementIterator,"elementIterator");
	HX_MARK_MEMBER_NAME(gridButtons,"gridButtons");
	HX_MARK_MEMBER_NAME(mainSprite,"mainSprite");
	HX_MARK_END_CLASS();
}

void ButtonController_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grid,"grid");
	HX_VISIT_MEMBER_NAME(elementIterator,"elementIterator");
	HX_VISIT_MEMBER_NAME(gridButtons,"gridButtons");
	HX_VISIT_MEMBER_NAME(mainSprite,"mainSprite");
}

hx::Val ButtonController_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"grid") ) { return hx::Val( grid ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tabClick") ) { return hx::Val( tabClick_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mainSprite") ) { return hx::Val( mainSprite ); }
		if (HX_FIELD_EQ(inName,"loadImages") ) { return hx::Val( loadImages_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gridButtons") ) { return hx::Val( gridButtons ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"elementIterator") ) { return hx::Val( elementIterator ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"createMessageBox") ) { return hx::Val( createMessageBox_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ButtonController_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"grid") ) { grid=inValue.Cast<  ::mvc::view::Grid >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mainSprite") ) { mainSprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gridButtons") ) { gridButtons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"elementIterator") ) { elementIterator=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ButtonController_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("grid",c6,d6,6b,44));
	outFields->push(HX_("elementIterator",ca,d0,47,e6));
	outFields->push(HX_("gridButtons",1b,a8,25,ef));
	outFields->push(HX_("mainSprite",1e,f9,41,19));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ButtonController_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::mvc::view::Grid */ ,(int)offsetof(ButtonController_obj,grid),HX_("grid",c6,d6,6b,44)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ButtonController_obj,elementIterator),HX_("elementIterator",ca,d0,47,e6)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ButtonController_obj,gridButtons),HX_("gridButtons",1b,a8,25,ef)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(ButtonController_obj,mainSprite),HX_("mainSprite",1e,f9,41,19)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ButtonController_obj_sStaticStorageInfo = 0;
#endif

static ::String ButtonController_obj_sMemberFields[] = {
	HX_("grid",c6,d6,6b,44),
	HX_("elementIterator",ca,d0,47,e6),
	HX_("gridButtons",1b,a8,25,ef),
	HX_("mainSprite",1e,f9,41,19),
	HX_("loadImages",7e,7f,bd,b3),
	HX_("createMessageBox",a0,54,c7,07),
	HX_("tabClick",b3,fd,02,b7),
	::String(null()) };

hx::Class ButtonController_obj::__mClass;

void ButtonController_obj::__register()
{
	ButtonController_obj _hx_dummy;
	ButtonController_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mvc.controller.ButtonController",cc,77,b1,2e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ButtonController_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ButtonController_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ButtonController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ButtonController_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mvc
} // end namespace controller
