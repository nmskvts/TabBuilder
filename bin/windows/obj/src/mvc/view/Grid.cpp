// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_mvc_view_Grid
#include <mvc/view/Grid.h>
#endif
#ifndef INCLUDED_mvc_view_GridButton
#include <mvc/view/GridButton.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_src_gui_Button
#include <src/gui/Button.h>
#endif
#ifndef INCLUDED_src_shape_Rectangle
#include <src/shape/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d8cbf2a7a451b313_14_new,"mvc.view.Grid","new",0x7a46e76d,"mvc.view.Grid.new","mvc/view/Grid.hx",14,0xfca09443)
HX_LOCAL_STACK_FRAME(_hx_pos_d8cbf2a7a451b313_39_addNewGridButton,"mvc.view.Grid","addNewGridButton",0x55f6b3ca,"mvc.view.Grid.addNewGridButton","mvc/view/Grid.hx",39,0xfca09443)
HX_LOCAL_STACK_FRAME(_hx_pos_d8cbf2a7a451b313_54_addGridButton,"mvc.view.Grid","addGridButton",0x88e99826,"mvc.view.Grid.addGridButton","mvc/view/Grid.hx",54,0xfca09443)
HX_LOCAL_STACK_FRAME(_hx_pos_d8cbf2a7a451b313_59_clean,"mvc.view.Grid","clean",0x768c25d6,"mvc.view.Grid.clean","mvc/view/Grid.hx",59,0xfca09443)
HX_LOCAL_STACK_FRAME(_hx_pos_d8cbf2a7a451b313_66_addBackGroundImage,"mvc.view.Grid","addBackGroundImage",0xd38f16df,"mvc.view.Grid.addBackGroundImage","mvc/view/Grid.hx",66,0xfca09443)
namespace mvc{
namespace view{

void Grid_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d8cbf2a7a451b313_14_new)
HXLINE(  18)		this->columns = 4;
HXLINE(  17)		this->rows = 4;
HXLINE(  29)		super::__construct();
HXLINE(  30)		this->gridWidth = ( (Float)(1000) );
HXLINE(  31)		this->gridHeight = ( (Float)(400) );
HXLINE(  32)		this->rowsLeft = this->rows;
HXLINE(  33)		this->columnsLeft = this->columns;
HXLINE(  34)		this->xStep = ( (Float)(5) );
HXLINE(  35)		this->yStep = ( (Float)(5) );
            	}

Dynamic Grid_obj::__CreateEmpty() { return new Grid_obj; }

void *Grid_obj::_hx_vtable = 0;

Dynamic Grid_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Grid_obj > _hx_result = new Grid_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Grid_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17120186) {
		if (inClassId<=(int)0x0e294065) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x0e294065;
			}
		} else {
			return inClassId==(int)0x17120186;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Grid_obj::addNewGridButton( ::mvc::view::GridButton button){
            	HX_STACKFRAME(&_hx_pos_d8cbf2a7a451b313_39_addNewGridButton)
HXDLIN(  39)		if ((this->columnsLeft > 0)) {
HXLINE(  40)			if ((this->rowsLeft > 0)) {
HXLINE(  41)				this->addGridButton(this->xStep,this->yStep,button);
HXLINE(  42)				 ::mvc::view::Grid _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  42)				Float _hx_tmp1 = _hx_tmp->xStep;
HXDLIN(  42)				_hx_tmp->xStep = (_hx_tmp1 + (button->get_width() + 5));
HXLINE(  43)				this->rowsLeft--;
            			}
            			else {
HXLINE(  46)				this->xStep = ( (Float)(5) );
HXLINE(  47)				 ::mvc::view::Grid _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  47)				Float _hx_tmp3 = _hx_tmp2->yStep;
HXDLIN(  47)				_hx_tmp2->yStep = (_hx_tmp3 + (button->get_height() + 5));
HXLINE(  48)				this->columnsLeft--;
HXLINE(  49)				this->rowsLeft = this->rows;
HXLINE(  50)				this->addNewGridButton(button);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grid_obj,addNewGridButton,(void))

void Grid_obj::addGridButton(Float xStep,Float yStep, ::mvc::view::GridButton button){
            	HX_STACKFRAME(&_hx_pos_d8cbf2a7a451b313_54_addGridButton)
HXLINE(  55)		button->set_x(xStep);
HXLINE(  56)		button->set_y(yStep);
HXLINE(  57)		this->addChild(button);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Grid_obj,addGridButton,(void))

void Grid_obj::clean(){
            	HX_STACKFRAME(&_hx_pos_d8cbf2a7a451b313_59_clean)
HXLINE(  60)		this->removeChildren(null(),null());
HXLINE(  61)		this->rowsLeft = this->rows;
HXLINE(  62)		this->columnsLeft = this->columns;
HXLINE(  63)		this->xStep = ( (Float)(5) );
HXLINE(  64)		this->yStep = ( (Float)(5) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Grid_obj,clean,(void))

void Grid_obj::addBackGroundImage(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_d8cbf2a7a451b313_66_addBackGroundImage)
HXLINE(  67)		this->removeChildren(null(),null());
HXLINE(  68)		this->bitMapData = ::openfl::utils::Assets_obj::getBitmapData(path,null());
HXLINE(  69)		this->bitMap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,this->bitMapData,null(),null());
HXLINE(  70)		Float scaleY = this->gridHeight;
HXDLIN(  70)		Float scaleY1 = (scaleY / this->bitMap->get_height());
HXLINE(  71)		Float scaleX = this->gridWidth;
HXDLIN(  71)		Float scaleX1 = (scaleX / this->bitMap->get_width());
HXLINE(  72)		if ((scaleX1 > scaleY1)) {
HXLINE(  73)			this->bitMap->set_scaleX(scaleY1);
HXLINE(  74)			this->bitMap->set_scaleY(scaleY1);
            		}
            		else {
HXLINE(  77)			this->bitMap->set_scaleX(scaleX1);
HXLINE(  78)			this->bitMap->set_scaleY(scaleX1);
            		}
HXLINE(  80)		this->addChild(this->bitMap);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grid_obj,addBackGroundImage,(void))


hx::ObjectPtr< Grid_obj > Grid_obj::__new() {
	hx::ObjectPtr< Grid_obj > __this = new Grid_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Grid_obj > Grid_obj::__alloc(hx::Ctx *_hx_ctx) {
	Grid_obj *__this = (Grid_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Grid_obj), true, "mvc.view.Grid"));
	*(void **)__this = Grid_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Grid_obj::Grid_obj()
{
}

void Grid_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Grid);
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(rows,"rows");
	HX_MARK_MEMBER_NAME(columns,"columns");
	HX_MARK_MEMBER_NAME(rowsLeft,"rowsLeft");
	HX_MARK_MEMBER_NAME(columnsLeft,"columnsLeft");
	HX_MARK_MEMBER_NAME(xStep,"xStep");
	HX_MARK_MEMBER_NAME(yStep,"yStep");
	HX_MARK_MEMBER_NAME(gridWidth,"gridWidth");
	HX_MARK_MEMBER_NAME(gridHeight,"gridHeight");
	HX_MARK_MEMBER_NAME(bitMap,"bitMap");
	HX_MARK_MEMBER_NAME(bitMapData,"bitMapData");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Grid_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(rows,"rows");
	HX_VISIT_MEMBER_NAME(columns,"columns");
	HX_VISIT_MEMBER_NAME(rowsLeft,"rowsLeft");
	HX_VISIT_MEMBER_NAME(columnsLeft,"columnsLeft");
	HX_VISIT_MEMBER_NAME(xStep,"xStep");
	HX_VISIT_MEMBER_NAME(yStep,"yStep");
	HX_VISIT_MEMBER_NAME(gridWidth,"gridWidth");
	HX_VISIT_MEMBER_NAME(gridHeight,"gridHeight");
	HX_VISIT_MEMBER_NAME(bitMap,"bitMap");
	HX_VISIT_MEMBER_NAME(bitMapData,"bitMapData");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Grid_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"rows") ) { return hx::Val( rows ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"xStep") ) { return hx::Val( xStep ); }
		if (HX_FIELD_EQ(inName,"yStep") ) { return hx::Val( yStep ); }
		if (HX_FIELD_EQ(inName,"clean") ) { return hx::Val( clean_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitMap") ) { return hx::Val( bitMap ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"columns") ) { return hx::Val( columns ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rowsLeft") ) { return hx::Val( rowsLeft ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gridWidth") ) { return hx::Val( gridWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gridHeight") ) { return hx::Val( gridHeight ); }
		if (HX_FIELD_EQ(inName,"bitMapData") ) { return hx::Val( bitMapData ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"columnsLeft") ) { return hx::Val( columnsLeft ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addGridButton") ) { return hx::Val( addGridButton_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addNewGridButton") ) { return hx::Val( addNewGridButton_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"addBackGroundImage") ) { return hx::Val( addBackGroundImage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Grid_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::src::shape::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rows") ) { rows=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"xStep") ) { xStep=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yStep") ) { yStep=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitMap") ) { bitMap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"columns") ) { columns=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rowsLeft") ) { rowsLeft=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gridWidth") ) { gridWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gridHeight") ) { gridHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bitMapData") ) { bitMapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"columnsLeft") ) { columnsLeft=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Grid_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("rect",24,4d,a7,4b));
	outFields->push(HX_("rows",19,f5,ae,4b));
	outFields->push(HX_("columns",dd,ac,59,f3));
	outFields->push(HX_("rowsLeft",c0,29,5b,7e));
	outFields->push(HX_("columnsLeft",84,13,b7,71));
	outFields->push(HX_("xStep",e4,af,4a,4f));
	outFields->push(HX_("yStep",65,44,b1,e2));
	outFields->push(HX_("gridWidth",60,01,26,bf));
	outFields->push(HX_("gridHeight",4d,ab,6a,38));
	outFields->push(HX_("bitMap",cf,c7,f3,f0));
	outFields->push(HX_("bitMapData",99,dd,11,01));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Grid_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::src::shape::Rectangle */ ,(int)offsetof(Grid_obj,rect),HX_("rect",24,4d,a7,4b)},
	{hx::fsInt,(int)offsetof(Grid_obj,rows),HX_("rows",19,f5,ae,4b)},
	{hx::fsInt,(int)offsetof(Grid_obj,columns),HX_("columns",dd,ac,59,f3)},
	{hx::fsInt,(int)offsetof(Grid_obj,rowsLeft),HX_("rowsLeft",c0,29,5b,7e)},
	{hx::fsInt,(int)offsetof(Grid_obj,columnsLeft),HX_("columnsLeft",84,13,b7,71)},
	{hx::fsFloat,(int)offsetof(Grid_obj,xStep),HX_("xStep",e4,af,4a,4f)},
	{hx::fsFloat,(int)offsetof(Grid_obj,yStep),HX_("yStep",65,44,b1,e2)},
	{hx::fsFloat,(int)offsetof(Grid_obj,gridWidth),HX_("gridWidth",60,01,26,bf)},
	{hx::fsFloat,(int)offsetof(Grid_obj,gridHeight),HX_("gridHeight",4d,ab,6a,38)},
	{hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(Grid_obj,bitMap),HX_("bitMap",cf,c7,f3,f0)},
	{hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Grid_obj,bitMapData),HX_("bitMapData",99,dd,11,01)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Grid_obj_sStaticStorageInfo = 0;
#endif

static ::String Grid_obj_sMemberFields[] = {
	HX_("rect",24,4d,a7,4b),
	HX_("rows",19,f5,ae,4b),
	HX_("columns",dd,ac,59,f3),
	HX_("rowsLeft",c0,29,5b,7e),
	HX_("columnsLeft",84,13,b7,71),
	HX_("xStep",e4,af,4a,4f),
	HX_("yStep",65,44,b1,e2),
	HX_("gridWidth",60,01,26,bf),
	HX_("gridHeight",4d,ab,6a,38),
	HX_("bitMap",cf,c7,f3,f0),
	HX_("bitMapData",99,dd,11,01),
	HX_("addNewGridButton",f7,ee,7e,d6),
	HX_("addGridButton",d9,4e,48,7a),
	HX_("clean",89,71,5b,48),
	HX_("addBackGroundImage",4c,37,fe,b2),
	::String(null()) };

hx::Class Grid_obj::__mClass;

void Grid_obj::__register()
{
	Grid_obj _hx_dummy;
	Grid_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mvc.view.Grid",fb,ac,b1,bd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Grid_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Grid_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Grid_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Grid_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mvc
} // end namespace view
