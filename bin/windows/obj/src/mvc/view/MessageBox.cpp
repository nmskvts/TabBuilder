// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_mvc_view_MessageBox
#include <mvc/view/MessageBox.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_src_factory_ButtonFactory
#include <src/factory/ButtonFactory.h>
#endif
#ifndef INCLUDED_src_factory_TextFactory
#include <src/factory/TextFactory.h>
#endif
#ifndef INCLUDED_src_gui_Button
#include <src/gui/Button.h>
#endif
#ifndef INCLUDED_src_shape_Rectangle
#include <src/shape/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_adef16383ae6c530_13_new,"mvc.view.MessageBox","new",0xb01693eb,"mvc.view.MessageBox.new","mvc/view/MessageBox.hx",13,0x6b87f985)
HX_LOCAL_STACK_FRAME(_hx_pos_adef16383ae6c530_37_getCloseButton,"mvc.view.MessageBox","getCloseButton",0x62bd7d29,"mvc.view.MessageBox.getCloseButton","mvc/view/MessageBox.hx",37,0x6b87f985)
namespace mvc{
namespace view{

void MessageBox_obj::__construct(::String text, ::Dynamic __o_parentWidth, ::Dynamic __o_parentHeight){
            		 ::Dynamic parentWidth = __o_parentWidth;
            		if (hx::IsNull(__o_parentWidth)) parentWidth = 0;
            		 ::Dynamic parentHeight = __o_parentHeight;
            		if (hx::IsNull(__o_parentHeight)) parentHeight = 0;
            	HX_GC_STACKFRAME(&_hx_pos_adef16383ae6c530_13_new)
HXLINE(  20)		this->boxHeight = 100;
HXLINE(  19)		this->boxWidth = 250;
HXLINE(  23)		super::__construct();
HXLINE(  24)		this->set_x(((( (Float)(parentWidth) ) / ( (Float)(2) )) - (( (Float)(this->boxWidth) ) / ( (Float)(2) ))));
HXLINE(  25)		this->set_y(((( (Float)(parentHeight) ) / ( (Float)(2) )) - (( (Float)(this->boxHeight) ) / ( (Float)(2) ))));
HXLINE(  26)		this->rect =  ::src::shape::Rectangle_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (Float)(this->boxWidth) ),( (Float)(100) ),16777215);
HXLINE(  27)		this->closeButton = ::src::factory::ButtonFactory_obj::create(HX_("OK",1c,45,00,00),( (Float)(this->boxHeight) ),( (Float)(40) ),5263440,75,55);
HXLINE(  28)		this->textField = ::src::factory::TextFactory_obj::createTextField(text,( (Float)(this->boxWidth) ),0);
HXLINE(  29)		this->textField->set_y(( (Float)(5) ));
HXLINE(  30)		this->addChild(this->rect);
HXLINE(  31)		this->addChild(this->textField);
HXLINE(  32)		this->addChild(this->closeButton);
            	}

Dynamic MessageBox_obj::__CreateEmpty() { return new MessageBox_obj; }

void *MessageBox_obj::_hx_vtable = 0;

Dynamic MessageBox_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MessageBox_obj > _hx_result = new MessageBox_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MessageBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x29a0c163) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x29a0c163;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

 ::src::gui::Button MessageBox_obj::getCloseButton(){
            	HX_STACKFRAME(&_hx_pos_adef16383ae6c530_37_getCloseButton)
HXDLIN(  37)		return this->closeButton;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MessageBox_obj,getCloseButton,return )


hx::ObjectPtr< MessageBox_obj > MessageBox_obj::__new(::String text, ::Dynamic __o_parentWidth, ::Dynamic __o_parentHeight) {
	hx::ObjectPtr< MessageBox_obj > __this = new MessageBox_obj();
	__this->__construct(text,__o_parentWidth,__o_parentHeight);
	return __this;
}

hx::ObjectPtr< MessageBox_obj > MessageBox_obj::__alloc(hx::Ctx *_hx_ctx,::String text, ::Dynamic __o_parentWidth, ::Dynamic __o_parentHeight) {
	MessageBox_obj *__this = (MessageBox_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MessageBox_obj), true, "mvc.view.MessageBox"));
	*(void **)__this = MessageBox_obj::_hx_vtable;
	__this->__construct(text,__o_parentWidth,__o_parentHeight);
	return __this;
}

MessageBox_obj::MessageBox_obj()
{
}

void MessageBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MessageBox);
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(closeButton,"closeButton");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(boxWidth,"boxWidth");
	HX_MARK_MEMBER_NAME(boxHeight,"boxHeight");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MessageBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(closeButton,"closeButton");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(boxWidth,"boxWidth");
	HX_VISIT_MEMBER_NAME(boxHeight,"boxHeight");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MessageBox_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"boxWidth") ) { return hx::Val( boxWidth ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"boxHeight") ) { return hx::Val( boxHeight ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"closeButton") ) { return hx::Val( closeButton ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCloseButton") ) { return hx::Val( getCloseButton_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MessageBox_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::src::shape::Rectangle >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"boxWidth") ) { boxWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boxHeight") ) { boxHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"closeButton") ) { closeButton=inValue.Cast<  ::src::gui::Button >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MessageBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("rect",24,4d,a7,4b));
	outFields->push(HX_("closeButton",ca,87,30,94));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("boxWidth",fb,9f,81,45));
	outFields->push(HX_("boxHeight",52,d4,39,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo MessageBox_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::src::shape::Rectangle */ ,(int)offsetof(MessageBox_obj,rect),HX_("rect",24,4d,a7,4b)},
	{hx::fsObject /*  ::src::gui::Button */ ,(int)offsetof(MessageBox_obj,closeButton),HX_("closeButton",ca,87,30,94)},
	{hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(MessageBox_obj,textField),HX_("textField",cd,24,81,99)},
	{hx::fsInt,(int)offsetof(MessageBox_obj,boxWidth),HX_("boxWidth",fb,9f,81,45)},
	{hx::fsInt,(int)offsetof(MessageBox_obj,boxHeight),HX_("boxHeight",52,d4,39,42)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MessageBox_obj_sStaticStorageInfo = 0;
#endif

static ::String MessageBox_obj_sMemberFields[] = {
	HX_("rect",24,4d,a7,4b),
	HX_("closeButton",ca,87,30,94),
	HX_("textField",cd,24,81,99),
	HX_("boxWidth",fb,9f,81,45),
	HX_("boxHeight",52,d4,39,42),
	HX_("getCloseButton",d4,da,ce,1b),
	::String(null()) };

hx::Class MessageBox_obj::__mClass;

void MessageBox_obj::__register()
{
	MessageBox_obj _hx_dummy;
	MessageBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mvc.view.MessageBox",79,c2,d5,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MessageBox_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MessageBox_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MessageBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MessageBox_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mvc
} // end namespace view
