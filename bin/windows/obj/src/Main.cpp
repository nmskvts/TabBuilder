// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_mvc_controller_ButtonController
#include <mvc/controller/ButtonController.h>
#endif
#ifndef INCLUDED_mvc_view_Grid
#include <mvc/view/Grid.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_src_gui_Button
#include <src/gui/Button.h>
#endif
#ifndef INCLUDED_src_gui_TabButton
#include <src/gui/TabButton.h>
#endif
#ifndef INCLUDED_src_gui_TabSet
#include <src/gui/TabSet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_21_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",21,0x087e5c05)
HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_30_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",30,0x087e5c05)

void Main_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_21_new)
HXLINE(  20)		 ::Main _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  22)		super::__construct();
HXLINE(  23)		this->tabSet =  ::src::gui::TabSet_obj::__alloc( HX_CTX );
HXLINE(  24)		this->grid =  ::mvc::view::Grid_obj::__alloc( HX_CTX );
HXLINE(  25)		this->buttonController =  ::mvc::controller::ButtonController_obj::__alloc( HX_CTX ,this->grid,hx::ObjectPtr<OBJ_>(this));
HXLINE(  26)		 ::mvc::view::Grid _hx_tmp = this->grid;
HXDLIN(  26)		_hx_tmp->set_y(this->tabSet->get_height());
HXLINE(  28)		{
HXLINE(  28)			int _g = 0;
HXDLIN(  28)			::Array< ::Dynamic> _g1 = this->tabSet->getTabSet();
HXDLIN(  28)			while((_g < _g1->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Main,_gthis) HXARGC(1)
            				void _hx_run( ::Dynamic e){
            					HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_30_new)
HXLINE(  30)					_gthis->buttonController->tabClick();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  28)				 ::src::gui::TabButton tab = _g1->__get(_g).StaticCast<  ::src::gui::TabButton >();
HXDLIN(  28)				_g = (_g + 1);
HXLINE(  29)				tab->addEventListener(HX_("click",48,7c,5e,48), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null());
            			}
            		}
HXLINE(  34)		this->addChild(this->tabSet);
HXLINE(  35)		this->addChild(this->grid);
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x332f6459) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x332f6459;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}


hx::ObjectPtr< Main_obj > Main_obj::__new() {
	hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Main_obj > Main_obj::__alloc(hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(tabSet,"tabSet");
	HX_MARK_MEMBER_NAME(grid,"grid");
	HX_MARK_MEMBER_NAME(buttonController,"buttonController");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tabSet,"tabSet");
	HX_VISIT_MEMBER_NAME(grid,"grid");
	HX_VISIT_MEMBER_NAME(buttonController,"buttonController");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Main_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"grid") ) { return hx::Val( grid ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tabSet") ) { return hx::Val( tabSet ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"buttonController") ) { return hx::Val( buttonController ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Main_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"grid") ) { grid=inValue.Cast<  ::mvc::view::Grid >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tabSet") ) { tabSet=inValue.Cast<  ::src::gui::TabSet >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"buttonController") ) { buttonController=inValue.Cast<  ::mvc::controller::ButtonController >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tabSet",4d,5c,4a,7c));
	outFields->push(HX_("grid",c6,d6,6b,44));
	outFields->push(HX_("buttonController",2e,a1,34,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::src::gui::TabSet */ ,(int)offsetof(Main_obj,tabSet),HX_("tabSet",4d,5c,4a,7c)},
	{hx::fsObject /*  ::mvc::view::Grid */ ,(int)offsetof(Main_obj,grid),HX_("grid",c6,d6,6b,44)},
	{hx::fsObject /*  ::mvc::controller::ButtonController */ ,(int)offsetof(Main_obj,buttonController),HX_("buttonController",2e,a1,34,06)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("tabSet",4d,5c,4a,7c),
	HX_("grid",c6,d6,6b,44),
	HX_("buttonController",2e,a1,34,06),
	::String(null()) };

hx::Class Main_obj::__mClass;

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

